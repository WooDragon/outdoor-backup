name: Build and Release IPK

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  LEDE_REPO: https://github.com/coolsnowwolf/lede.git
  LEDE_BRANCH: master
  PACKAGE_NAME: outdoor-backup
  LUCI_PACKAGE_NAME: luci-app-outdoor-backup

jobs:
  build:
    name: Build IPK Packages
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          echo "After cleanup:"
          df -h

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ccache \
            ecj \
            fastjar \
            file \
            g++ \
            gawk \
            gettext \
            git \
            java-propose-classpath \
            libelf-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libssl-dev \
            python3 \
            python3-dev \
            python3-distutils \
            python3-setuptools \
            rsync \
            shellcheck \
            subversion \
            swig \
            time \
            unzip \
            wget \
            xsltproc \
            zlib1g-dev

          echo "Dependencies installed successfully"

      - name: Clone Lean's LEDE
        run: |
          echo "Cloning Lean's LEDE repository..."
          cd ..
          git clone --depth 1 --branch $LEDE_BRANCH $LEDE_REPO lede
          echo "LEDE cloned: $(du -sh lede | cut -f1)"

      - name: Link packages to LEDE
        run: |
          # Link outdoor-backup package (only Makefile and files/)
          mkdir -p ../lede/package/$PACKAGE_NAME
          ln -s "$(pwd)/Makefile" "../lede/package/$PACKAGE_NAME/Makefile"
          ln -s "$(pwd)/files" "../lede/package/$PACKAGE_NAME/files"
          echo "Linked $PACKAGE_NAME to ../lede/package/"

          # Link luci-app package
          ln -s "$(pwd)/$LUCI_PACKAGE_NAME" "../lede/package/$LUCI_PACKAGE_NAME"
          echo "Linked $LUCI_PACKAGE_NAME to ../lede/package/"

          # Verify links
          ls -la "../lede/package/$PACKAGE_NAME"
          ls -la "../lede/package/$LUCI_PACKAGE_NAME"

      - name: Update feeds
        run: |
          cd ../lede
          ./scripts/feeds update -a
          echo "Feeds updated successfully"

      - name: Install feeds
        run: |
          cd ../lede
          ./scripts/feeds install -a
          echo "Feeds installed successfully"

      - name: Configure packages
        run: |
          cd ../lede

          # Create minimal .config for package compilation
          cat > .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_PACKAGE_$PACKAGE_NAME=y
          CONFIG_PACKAGE_$LUCI_PACKAGE_NAME=y
          EOF

          # Resolve dependencies
          make defconfig

          echo "Configuration completed"
          echo "Enabled packages:"
          grep "CONFIG_PACKAGE_outdoor-backup" .config || echo "Warning: Package not found in .config"

      - name: Build tools
        run: |
          cd ../lede
          echo "Building host tools..."
          make tools/install -j$(nproc) V=s

      - name: Build toolchain
        run: |
          cd ../lede
          echo "Building toolchain..."
          make toolchain/install -j$(nproc) V=s

      - name: Build outdoor-backup package
        run: |
          cd ../lede
          echo "Building $PACKAGE_NAME..."
          make package/$PACKAGE_NAME/compile V=s -j$(nproc)

          # Verify build
          IPK=$(find bin/packages/ -name "${PACKAGE_NAME}*.ipk" | head -1)
          if [ -z "$IPK" ]; then
            echo "Error: outdoor-backup IPK not found"
            exit 1
          fi
          echo "Built: $IPK ($(du -h "$IPK" | cut -f1))"

      - name: Build luci-app-outdoor-backup package
        run: |
          cd ../lede
          echo "Building $LUCI_PACKAGE_NAME..."
          make package/$LUCI_PACKAGE_NAME/compile V=s -j$(nproc)

          # Verify build
          IPK=$(find bin/packages/ -name "${LUCI_PACKAGE_NAME}*.ipk" | head -1)
          if [ -z "$IPK" ]; then
            echo "Error: luci-app-outdoor-backup IPK not found"
            exit 1
          fi
          echo "Built: $IPK ($(du -h "$IPK" | cut -f1))"

      - name: Run ShellCheck validation
        run: |
          echo "Running ShellCheck on all shell scripts..."

          # Check main scripts
          shellcheck --shell=sh --severity=warning \
            files/opt/outdoor-backup/scripts/*.sh

          # Check hotplug script
          shellcheck --shell=sh --severity=warning \
            files/etc/hotplug.d/block/90-outdoor-backup

          # Check init script
          shellcheck --shell=sh --severity=warning \
            files/etc/init.d/outdoor-backup

          echo "‚úì All shell scripts passed ShellCheck"

      - name: Collect artifacts
        run: |
          mkdir -p artifacts

          # Find and copy IPK files
          find ../lede/bin/packages/ -name "${PACKAGE_NAME}*.ipk" -exec cp {} artifacts/ \;
          find ../lede/bin/packages/ -name "${LUCI_PACKAGE_NAME}*.ipk" -exec cp {} artifacts/ \;

          echo "Collected artifacts:"
          ls -lh artifacts/

          # Verify both packages exist
          if ! ls artifacts/${PACKAGE_NAME}*.ipk 1> /dev/null 2>&1; then
            echo "Error: outdoor-backup IPK not found in artifacts"
            exit 1
          fi
          if ! ls artifacts/${LUCI_PACKAGE_NAME}*.ipk 1> /dev/null 2>&1; then
            echo "Error: luci-app IPK not found in artifacts"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-packages
          path: artifacts/*.ipk
          retention-days: 30

      - name: Extract version from Makefile
        id: version
        run: |
          VERSION=$(grep "^PKG_VERSION:=" Makefile | cut -d'=' -f2)
          RELEASE=$(grep "^PKG_RELEASE:=" Makefile | cut -d'=' -f2)
          FULL_VERSION="${VERSION}-${RELEASE}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: $FULL_VERSION"

      - name: Generate release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat > release_notes.md <<'EOF'
          ## OpenWrt SD Card Backup System

          Auto-built IPK packages for outdoor-backup system.

          ### üì¶ Packages

          - `outdoor-backup_*_all.ipk` - Core backup system
          - `luci-app-outdoor-backup_*_all.ipk` - WebUI management interface

          ### ‚úÖ Supported Architectures

          - **ARM64** (NanoPi R5S, R4S, R6S, etc.)
          - **x86_64** (Soft routers, VMs)
          - **MIPS** (Theoretical support, untested)

          > **Note**: These are `PKGARCH:=all` packages (pure shell scripts) that work on any architecture. Dependencies (kmod packages) are automatically resolved by opkg from your system's feeds.

          ### üì• Installation

          ```bash
          # Method 1: Direct installation (recommended)
          opkg update
          opkg install outdoor-backup_*_all.ipk
          opkg install luci-app-outdoor-backup_*_all.ipk

          # Method 2: Install with dependencies
          opkg update
          opkg install rsync block-mount kmod-usb-storage \
                       kmod-fs-ext4 kmod-fs-vfat kmod-fs-exfat kmod-fs-ntfs3
          opkg install outdoor-backup_*_all.ipk
          opkg install luci-app-outdoor-backup_*_all.ipk
          ```

          ### üîç Verification

          ```bash
          # Check service status
          /etc/init.d/outdoor-backup status

          # View logs
          logread -f | grep outdoor-backup

          # Access WebUI
          # http://router-ip/cgi-bin/luci/admin/services/outdoor-backup
          ```

          ### üõ†Ô∏è Requirements

          - OpenWrt 19.07+ or Lean's LEDE
          - Internal storage (SSD/HDD/eMMC) for backup destination
          - USB port for SD card readers

          ### ‚ú® Features

          - Automatic hotplug-triggered backups
          - Incremental rsync with `--ignore-existing`
          - LED status indication
          - Concurrent backup protection (PID lock)
          - Support for multiple filesystems (ext4/exFAT/NTFS/FAT32)
          - Primary and Replica backup modes
          - WebUI management with real-time monitoring

          ### üìù Build Info

          - Built with: Lean's LEDE (coolsnowwolf/lede)
          - ShellCheck: Passed
          - Version: ${{ steps.version.outputs.version }}
          - Commit: ${{ github.sha }}

          ---

          For documentation, visit: https://github.com/${{ github.repository }}
          EOF

          echo "Release notes generated"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: artifacts/*.ipk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: dev-drprasad/delete-older-releases@v0.3.0
        with:
          keep_latest: 5
          delete_tags: true
          delete_tag_pattern: v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        run: |
          echo "### ‚úÖ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Packages built:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for ipk in artifacts/*.ipk; do
            echo "- \`$(basename $ipk)\` ($(du -h "$ipk" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**ShellCheck:** ‚úì Passed" >> $GITHUB_STEP_SUMMARY

          if [ "${{ startsWith(github.ref, 'refs/tags/') }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release:** Created at ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
