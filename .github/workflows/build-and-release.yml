name: Build and Release IPK

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PACKAGE_NAME: outdoor-backup
  LUCI_PACKAGE_NAME: luci-app-outdoor-backup
  OPENWRT_VERSION: 23.05.5

jobs:
  build:
    name: Build IPK Packages
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - arch: x86-64
            target: x86
            subtarget: 64
          - arch: aarch64_cortex-a53
            target: rockchip
            subtarget: armv8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev gawk git libssl-dev gettext unzip file wget

      - name: Download OpenWrt SDK
        run: |
          SDK_URL="https://downloads.openwrt.org/releases/${{ env.OPENWRT_VERSION }}/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-${{ env.OPENWRT_VERSION }}-${{ matrix.target }}-${{ matrix.subtarget}}_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          echo "Downloading SDK from: $SDK_URL"
          wget -q "$SDK_URL" -O sdk.tar.xz
          tar -xf sdk.tar.xz
          SDK_DIR=$(ls -d openwrt-sdk-* | head -1)
          mv "$SDK_DIR" sdk
          echo "SDK extracted to: sdk/"
          ls -la sdk/

      - name: Prepare package
        run: |
          # Copy outdoor-backup to SDK package directory (standard package location)
          mkdir -p sdk/package/$PACKAGE_NAME
          cp Makefile sdk/package/$PACKAGE_NAME/
          cp -r files sdk/package/$PACKAGE_NAME/

          # Copy luci-app to feeds/luci/applications/ (LuCI app standard location)
          mkdir -p sdk/feeds/luci/applications/$LUCI_PACKAGE_NAME
          cp -r $LUCI_PACKAGE_NAME/* sdk/feeds/luci/applications/$LUCI_PACKAGE_NAME/

          echo "Core package prepared:"
          ls -la sdk/package/$PACKAGE_NAME
          echo "LuCI app prepared:"
          ls -la sdk/feeds/luci/applications/$LUCI_PACKAGE_NAME

      - name: Update and install feeds
        run: |
          cd sdk
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure SDK
        run: |
          cd sdk
          make defconfig

      - name: Build outdoor-backup
        run: |
          cd sdk
          make package/$PACKAGE_NAME/compile V=s -j$(nproc)

      - name: Build luci-app-outdoor-backup
        run: |
          cd sdk
          make package/feeds/luci/$LUCI_PACKAGE_NAME/compile V=s -j$(nproc)

      - name: Run ShellCheck validation
        run: |
          echo "Running ShellCheck on all shell scripts..."
          shellcheck --shell=sh --severity=warning \
            files/opt/outdoor-backup/scripts/*.sh \
            files/etc/hotplug.d/block/90-outdoor-backup \
            files/etc/init.d/outdoor-backup
          echo "✓ All shell scripts passed ShellCheck"

      - name: Collect artifacts
        run: |
          mkdir -p artifacts
          find sdk/bin/packages/ -name "*.ipk" -exec cp {} artifacts/ \;

          echo "Collected artifacts:"
          ls -lh artifacts/

          # Rename with architecture
          cd artifacts
          for ipk in *.ipk; do
            mv "$ipk" "${ipk%.ipk}_${{ matrix.arch }}.ipk"
          done
          ls -lh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-packages-${{ matrix.arch }}
          path: artifacts/*.ipk
          retention-days: 30

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release-assets
          find artifacts -name "*.ipk" -exec cp {} release-assets/ \;
          ls -lh release-assets/

      - name: Extract version from Makefile
        id: version
        run: |
          VERSION=$(grep "^PKG_VERSION:=" Makefile | cut -d'=' -f2)
          RELEASE=$(grep "^PKG_RELEASE:=" Makefile | cut -d'=' -f2)
          FULL_VERSION="${VERSION}-${RELEASE}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: $FULL_VERSION"

      - name: Generate release notes
        run: |
          cat > release_notes.md <<'EOF'
          ## OpenWrt SD Card Backup System

          Auto-built IPK packages for outdoor-backup system.

          ### 📦 Packages

          Built for multiple architectures:
          - `outdoor-backup_*_x86-64.ipk` - x86_64 architecture (Core system)
          - `outdoor-backup_*_aarch64_cortex-a53.ipk` - ARM64 architecture (Core system)
          - `luci-app-outdoor-backup_*_all.ipk` - WebUI (architecture-independent)

          ### ✅ Supported Architectures

          - **ARM64** (NanoPi R5S, R4S, R6S, etc.) - Use `*_aarch64_cortex-a53.ipk`
          - **x86_64** (Soft routers, VMs) - Use `*_x86-64.ipk`

          ### 📥 Installation

          ```bash
          # Step 1: Install dependencies
          opkg update
          opkg install rsync block-mount kmod-usb-storage \
                       kmod-fs-ext4 kmod-fs-vfat kmod-fs-exfat kmod-fs-ntfs3

          # Step 2: Install core package (choose your architecture)
          # For ARM64 (R5S, R4S, etc.):
          opkg install outdoor-backup_*_aarch64_cortex-a53.ipk
          # For x86_64:
          opkg install outdoor-backup_*_x86-64.ipk

          # Step 3: Install WebUI (architecture-independent)
          opkg install luci-app-outdoor-backup_*_all.ipk
          ```

          ### 🔍 Verification

          ```bash
          # Check service status
          /etc/init.d/outdoor-backup status

          # View logs
          logread -f | grep outdoor-backup

          # Access WebUI
          # http://router-ip/cgi-bin/luci/admin/services/outdoor-backup
          ```

          ### 🛠️ Requirements

          - OpenWrt 19.07+ or Lean's LEDE
          - Internal storage (SSD/HDD/eMMC) for backup destination
          - USB port for SD card readers
          - Required kernel modules (install via opkg as shown above)

          ### ✨ Features

          - Automatic hotplug-triggered backups
          - Incremental rsync with `--ignore-existing`
          - LED status indication
          - Concurrent backup protection (PID lock)
          - Support for multiple filesystems (ext4/exFAT/NTFS/FAT32)
          - Primary and Replica backup modes
          - WebUI management with real-time monitoring

          ### 📝 Build Info

          - Built with: OpenWrt SDK ${{ env.OPENWRT_VERSION }}
          - ShellCheck: Passed
          - Version: ${{ steps.version.outputs.version }}
          - Commit: ${{ github.sha }}
          - Architectures: x86-64, aarch64_cortex-a53

          ---

          For documentation, visit: https://github.com/${{ github.repository }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: release-assets/*.ipk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@v0.3.0
        with:
          keep_latest: 5
          delete_tags: true
          delete_tag_pattern: v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        run: |
          echo "### ✅ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Packages built:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for ipk in release-assets/*.ipk; do
            echo "- \`$(basename $ipk)\` ($(du -h "$ipk" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**ShellCheck:** ✓ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** Created at ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
