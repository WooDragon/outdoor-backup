name: Build and Release IPK

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PACKAGE_NAME: outdoor-backup
  LUCI_PACKAGE_NAME: luci-app-outdoor-backup

jobs:
  build:
    name: Build IPK Packages
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch:
          - arch: x86_64
            sdk_url_path: x86/64
          - arch: aarch64_generic
            sdk_url_path: rockchip/armv8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare package files
        run: |
          mkdir -p /tmp/packages/$PACKAGE_NAME
          mkdir -p /tmp/packages/$LUCI_PACKAGE_NAME

          # Copy outdoor-backup package
          cp Makefile /tmp/packages/$PACKAGE_NAME/
          cp -r files /tmp/packages/$PACKAGE_NAME/

          # Copy luci-app package
          cp -r $LUCI_PACKAGE_NAME/* /tmp/packages/$LUCI_PACKAGE_NAME/

          echo "Package files prepared in /tmp/packages"
          ls -la /tmp/packages/

      - name: Build with OpenWrt SDK
        uses: openwrt/gh-action-sdk@v7
        env:
          ARCH: ${{ matrix.arch.arch }}
          FEEDNAME: packages_ci
          PACKAGES: ${{ env.PACKAGE_NAME }} ${{ env.LUCI_PACKAGE_NAME }}
          V: s

      - name: Run ShellCheck validation
        run: |
          echo "Running ShellCheck on all shell scripts..."

          # Check main scripts
          shellcheck --shell=sh --severity=warning \
            files/opt/outdoor-backup/scripts/*.sh

          # Check hotplug script
          shellcheck --shell=sh --severity=warning \
            files/etc/hotplug.d/block/90-outdoor-backup

          # Check init script
          shellcheck --shell=sh --severity=warning \
            files/etc/init.d/outdoor-backup

          echo "✓ All shell scripts passed ShellCheck"

      - name: Move created packages to project dir
        run: |
          mkdir -p bin/packages
          cp -r bin/targets/*/*/packages/*.ipk bin/packages/ || true
          ls -la bin/packages/

      - name: Collect artifacts
        run: |
          mkdir -p artifacts

          # Copy IPK files with architecture info
          for ipk in bin/packages/*.ipk; do
            if [ -f "$ipk" ]; then
              basename=$(basename "$ipk")
              # Add architecture to filename
              new_name="${basename%.ipk}_${{ matrix.arch.arch }}.ipk"
              cp "$ipk" "artifacts/$new_name"
            fi
          done

          echo "Collected artifacts:"
          ls -lh artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-packages-${{ matrix.arch.arch }}
          path: artifacts/*.ipk
          retention-days: 30

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release-assets
          find artifacts -name "*.ipk" -exec cp {} release-assets/ \;
          ls -lh release-assets/

      - name: Extract version from Makefile
        id: version
        run: |
          VERSION=$(grep "^PKG_VERSION:=" Makefile | cut -d'=' -f2)
          RELEASE=$(grep "^PKG_RELEASE:=" Makefile | cut -d'=' -f2)
          FULL_VERSION="${VERSION}-${RELEASE}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: $FULL_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md <<'EOF'
          ## OpenWrt SD Card Backup System

          Auto-built IPK packages for outdoor-backup system.

          ### 📦 Packages

          Built for multiple architectures:
          - `outdoor-backup_*_x86_64.ipk` - x86_64 architecture
          - `outdoor-backup_*_aarch64_generic.ipk` - ARM64 architecture (NanoPi R5S, etc.)
          - `luci-app-outdoor-backup_*_x86_64.ipk` - WebUI for x86_64
          - `luci-app-outdoor-backup_*_aarch64_generic.ipk` - WebUI for ARM64

          ### ✅ Supported Architectures

          - **ARM64** (NanoPi R5S, R4S, R6S, etc.) - Use `*_aarch64_generic.ipk`
          - **x86_64** (Soft routers, VMs) - Use `*_x86_64.ipk`

          ### 📥 Installation

          ```bash
          # Step 1: Install dependencies
          opkg update
          opkg install rsync block-mount kmod-usb-storage \
                       kmod-fs-ext4 kmod-fs-vfat kmod-fs-exfat kmod-fs-ntfs3

          # Step 2: Install packages (choose your architecture)
          # For ARM64 (R5S, R4S, etc.):
          opkg install outdoor-backup_*_aarch64_generic.ipk
          opkg install luci-app-outdoor-backup_*_aarch64_generic.ipk

          # For x86_64:
          opkg install outdoor-backup_*_x86_64.ipk
          opkg install luci-app-outdoor-backup_*_x86_64.ipk
          ```

          ### 🔍 Verification

          ```bash
          # Check service status
          /etc/init.d/outdoor-backup status

          # View logs
          logread -f | grep outdoor-backup

          # Access WebUI
          # http://router-ip/cgi-bin/luci/admin/services/outdoor-backup
          ```

          ### 🛠️ Requirements

          - OpenWrt 19.07+ or Lean's LEDE
          - Internal storage (SSD/HDD/eMMC) for backup destination
          - USB port for SD card readers
          - Required kernel modules (install via opkg as shown above)

          ### ✨ Features

          - Automatic hotplug-triggered backups
          - Incremental rsync with `--ignore-existing`
          - LED status indication
          - Concurrent backup protection (PID lock)
          - Support for multiple filesystems (ext4/exFAT/NTFS/FAT32)
          - Primary and Replica backup modes
          - WebUI management with real-time monitoring

          ### 📝 Build Info

          - Built with: OpenWrt SDK (official)
          - ShellCheck: Passed
          - Version: ${{ steps.version.outputs.version }}
          - Commit: ${{ github.sha }}
          - Architectures: x86_64, aarch64_generic

          ---

          For documentation, visit: https://github.com/${{ github.repository }}
          EOF

          echo "Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: release-assets/*.ipk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@v0.3.0
        with:
          keep_latest: 5
          delete_tags: true
          delete_tag_pattern: v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        run: |
          echo "### ✅ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Packages built:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for ipk in release-assets/*.ipk; do
            echo "- \`$(basename $ipk)\` ($(du -h "$ipk" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**ShellCheck:** ✓ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** Created at ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
